Maintain README as living project state

- Treat `README.md` as the single source of truth for the current state of the project.
- At the start of each new chat, load `README.md` and use it as persistent context. Prefer it over prior chat memory when they conflict.
- After any meaningful assistant-driven change (code edits, new/removed files, APIs/routes changes, DB/schema updates, environment/config changes, scripts/daemons changes), update `README.md` in the same turn before finishing.
- Meaningful changes include (non-exhaustive):
  - New endpoints or breaking changes to existing ones (tRPC or REST)
  - Schema or migration changes
  - New services/daemons, Pusher channels/events, or stream behavior
  - Updated environment variables or configuration
  - Significant refactors or file moves that affect discoverability
- Trivial changes (formatting, comments, variable naming) do not require a README update.

Formatting and structure

- Keep `README.md` concise and skimmable using bullet points.
- Maintain a top-of-file section named `## Project Status` with the following subsections:
  - Recent Changes (newest first)
  - Open Tasks / Next Steps
  - APIs & Routes (high-level; link to files and list methods/actions)
  - Services & Daemons (Pi daemons, scripts, Pusher events)
  - Database / Schema Notes (enumerate key tables/enums/constraints)
  - Env/Config Notes (list variable names only; no secrets)
  - Known Issues
- Link files/dirs with backticks (e.g., `src/server/api/routers/table.ts`).
- Never expose secrets; redact sensitive values.
- Normalize the `## Project Status` section if it drifts, without removing user-authored content outside that section.
- Keep the Recent Changes list focused and limited to the most recent items when it grows too long.

Process

- When updating `README.md`, summarize meaningful diffs only.
- Prefer adding short, actionable bullets over long prose.
- If the status section is missing, create it at the top and preserve any existing content below.
